ARG ROS_DISTRO
FROM osrf/ros:${ROS_DISTRO}-desktop-full
ENV HOME /root
SHELL ["/bin/bash", "-c"]
ARG http_proxy
ARG HTTP_PROXY
ARG https_proxy
ARG HTTPS_PROXY
ENV http_proxy ${http_proxy}
ENV HTTP_PROXY ${HTTP_PROXY}
ENV https_proxy ${https_proxy}
ENV HTTPS_PROXY ${HTTPS_PROXY}
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -qy --no-install-recommends \
    # build utilities
    build-essential \
    # version control system
    git \
    # network utilities
    wget curl net-tools \
    # zip utilities
    zip unzip \
    # python3 utilities
    python3-dev python3-pip python3-venv python3-setuptools python3-wheel \
    # terminal, x11 utilities
    libncurses-dev \
    libx11-dev libxt-dev libxpm-dev xauth \
    # video for linux utilities
    v4l-utils \
    # document generator
    doxygen \
    # catkin build system
    python3-catkin-tools \
    # high performance computation utilities
    libatlas-base-dev libsuitesparse-dev \
    # google c++ tools
    libgoogle-glog-dev libgflags-dev \
    && rm -rf /var/lib/apt/lists/*
ARG COMPILE_JOBS
# build and install latest cmake 
ARG CMAKE_VERSION
ENV CMAKE_VERSION ${CMAKE_VERSION}
ENV CMAKE_SRC_URL https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.tar.gz
RUN wget ${CMAKE_SRC_URL} && \
    tar xvf cmake-${CMAKE_VERSION}.tar.gz && \
    cd cmake-${CMAKE_VERSION} && \
    ./bootstrap -- -DCMAKE_BUILD_TYPE:STRING=Release && \
    make -j ${COMPILE_JOBS} && \
    make install && \
    rm -rf ../cmake-${CMAKE_VERSION}.tar.gz ../cmake-${CMAKE_VERSION}
# build and install latest vim
ARG VIM_VERSION
ENV VIM_VERSION ${VIM_VERSION}
ENV VIM_SRC_URL https://github.com/vim/vim/archive/refs/tags/v${VIM_VERSION}.tar.gz
RUN wget ${VIM_SRC_URL} && \
    tar xvf v${VIM_VERSION}.tar.gz && \
    cd vim-${VIM_VERSION}/src && \
    ./configure \
    -with-features=huge \
    --enable-python3interp \
    --enable-multibyte \
    --enable-cscope \
    && \
    make -j ${COMPILE_JOBS} && \
    make install && \
    rm -rf ../../v${VIM_VERSION}.tar.gz ../../vim-${VIM_VERSION}
# download and install latest clangd
ARG CLANGD_VERSION
ENV CLANGD_VERSION=${CLANGD_VERSION}
ENV CLANGD_RELEASE_URL https://github.com/clangd/clangd/releases/download/${CLANGD_VERSION}/clangd-linux-${CLANGD_VERSION}.zip
RUN wget ${CLANGD_RELEASE_URL} && \
    unzip clangd-linux-${CLANGD_VERSION}.zip && \
    mv clangd_${CLANGD_VERSION}/bin/* /usr/bin/ && \
    mv clangd_${CLANGD_VERSION}/lib/* /usr/lib/ && \
    rm -rf clangd-linux-${CLANGD_VERSION}.zip clangd_${CLANGD_VERSION}
# build and install latest python3
ARG PYTHON3_VERSION
ENV PYTHON3_VERSION ${PYTHON3_VERSION}
ENV PYTHON3_SRC_URL https://www.python.org/ftp/python/${PYTHON3_VERSION}/Python-${PYTHON3_VERSION}.tar.xz
RUN wget ${PYTHON3_SRC_URL} && \
    tar xvf Python-${PYTHON3_VERSION}.tar.xz && \
    cd Python-${PYTHON3_VERSION} && \
    ./configure && \
    make -j ${COMPILE_JOBS} && \
    make altinstall && \
    rm -rf ../Python-${PYTHON3_VERSION} ../Python-${PYTHON3_VERSION}.tar.xz
# set up and configure a catkin workspace
ENV CATKIN_WORKSPACE ${HOME}/catkin_ws
RUN mkdir -p ${CATKIN_WORKSPACE}/src && \
    cd ${CATKIN_WORKSPACE} && \
    catkin config \
    --extend /opt/ros/$ROS_DISTRO \
    --cmake-args \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_EXPORT_COMPILE_COMMANDS=ON && \
    echo "source /opt/ros/${ROS_DISTRO}/setup.bash" >> ${HOME}/.bashrc && \
    echo "source ${CATKIN_WORKSPACE}/devel/setup.bash" >> ${HOME}/.bashrc
# set up and configure a python-venv workspace
ENV PYTHON3_VENV_WORKSPACE ${HOME}/pyvenv_ws
RUN PYTHON3_VERSION_MAJOR=`echo ${PYTHON3_VERSION} | cut -d. -f1` && \
    PYTHON3_VERSION_MINOR=`echo ${PYTHON3_VERSION} | cut -d. -f2` && \
    python${PYTHON3_VERSION_MAJOR}.${PYTHON3_VERSION_MINOR} -m venv ${PYTHON3_VENV_WORKSPACE} && \
    cd ${PYTHON3_VENV_WORKSPACE} && \
    source bin/activate && \
    python3 -m pip install --upgrade --proxy ${http_proxy} \ 
    autopep8 \
    cpplint \
    numpy \
    pandas \
    matplotlib \
    && \
    deactivate
